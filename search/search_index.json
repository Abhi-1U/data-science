{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Data Science Practicals : Practical 1: Aim: Practical of Data collection, Data curation and management for Unstructured data (NoSQL/MongoDB)","title":"Home"},{"location":"#data-science","text":"","title":"Data Science"},{"location":"#practicals","text":"Practical 1: Aim: Practical of Data collection, Data curation and management for Unstructured data (NoSQL/MongoDB)","title":"Practicals :"},{"location":"data/","text":"What is data ? Data are a set of values of qualitative or quantitative variables about one or more persons or objects, while a datum (singular of data) is a single value of a single variable.","title":"Data"},{"location":"data/#what-is-data","text":"Data are a set of values of qualitative or quantitative variables about one or more persons or objects, while a datum (singular of data) is a single value of a single variable.","title":"What is data ?"},{"location":"practical1/","text":"Practical 1 Aim: Practical of Data collection, Data curation and management for Unstructured data (NoSQL/MongoDB) Theory: Data Collection : Data collection is defined as the procedure of collecting, measuring and analyzing accurate insights for research using standard validated techniques. A researcher can evaluate their hypothesis on the basis of collected data. In most cases, data collection is the primary and most important step for research, irrespective of the field of research. Data Curation : Data curation is the organization and integration of data collected from various sources. It involves annotation, publication and presentation of the data such that the value of the data is maintained over time, and the data remains available for reuse and preservation. Management of Unstructured Data : Structured data can be best understood with an example of MySQL table in which data is stored according to the data Type in their specific field and order. Whereas Unstructured Data refers to data which does not follow a specific table structure and can have variances in fields. Managing unstructured data using SQL based RDBMS is hard as there are a lot of Null values and type casting issues. Hence, it is more prevalent to use NoSQL databases like MongoDB which do not restrict database to certain type or schema. MongoDB Operations: 1. MongoDB Create Database : Syntax : 1 show dbs 1 use database_name Command : 1 use cars Output: 2. MongoDB Drop Database : Syntax : 1 db.dropDatabase() Command : 1 db.dropDatabase() Output: 3. MongoDB Create collection : Syntax : 1 db.createCollection(\"name\",options..) Command : 1 db.createCollection(\"details\") Output: Extra: To view the list of collections : 1 show collections 4. MongoDB Drop collection : Syntax : 1 db.collection_name.drop() Command : 1 db.details.drop() Output: 5. MongoDB Insert Document : Syntax : 1 db.collection_name.insert({key:value},options...) Command : 1 2 3 4 5 6 7 8 9 db.details.insert({ \"car_id\": 1, \"Brand\": \"Audi\", \"Model\": \"Audi Q8\", \"Mileage(Km/L)\": 9, \"price(Lakhs)\": 99.2, \"no of seats\": 7, \"Top speed(Km/H)\": 320 }) Output: Extra : To Insert Multiple documents just send an array of documents 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 db.details.insert([{ \"car_id\": 2, \"Brand\": \"Honda\", \"Model\": \"Civic\", \"Mileage(Km/L)\": 17, \"price(Lakhs)\": 21, \"no of seats\": 5, \"Top speed(Km/H)\": 130 }, ... ... ... { \"car_id\": 10, \"Brand\": \"Renault\", \"Model\": \"Duster\", \"Mileage(Km/L)\": 14.3, \"price(Lakhs)\": 11.93, \"no of seats\": 5, \"Top speed(Km/H)\": 170 } ]) ... : : : : 6. MongoDB Query Document : Syntax : 1 2 3 db.collection_name.find() //For pretty printing db.collection_name.find().forEach(printjson) Command : 1 2 3 db.details.find() //For pretty printing db.details.find().forEach(printjson) Output: 7. MongoDB Update Document: Syntax : 1 2 3 db.collection_name.update(criteria,updated_data,options..) //or using save db.collection_name.save(object,options..) Command : 1 2 3 4 5 6 7 8 9 10 11 12 db.details.update({\"Model\": \"Audi Q8\"},{$set:{\"Model\": \"Audi Q7\"}},{multi:true}) //or using save db.details.save({ \"_id\" : ObjectId(\"602a4509475bfe85686206cf\"), \"car_id\" : 1, \"Brand\" : \"Audi\", \"Model\" : \"Audi Q7\", \"Mileage(Km/L)\" : 9, \"price(Lakhs)\" : 99.2, \"no of seats\" : 7, \"Top speed(Km/H)\" : 320 }) Output: 8. Delete document in MongoDB : Syntax : 1 db.collection_name.remove(delete_criteria,options...) Command : 1 db.details.remove({car_id:1}) Output: 9. MongoDB Projection : Syntax : 1 db.collection_name.find({},{field_key:1or0}) Command : 1 db.details.find({},{\"_id\":0,\"car_id\":1}) Output: 10. limit() and skip() method in MongoDB : limit() Syntax : 1 db.collection_name.find().limit(number_of_documents) Command : 1 db.details.find({car_id:{$gt:5}}).limit(2).pretty() Output: skip() Syntax : 1 db.collection_name.find().skip(number_of_documents) Command : 1 db.details.find({car_id:{$gt:5}}).limit(2).skip(2).pretty() Output: 11. Sorting of Documents in MongoDB : Syntax : 1 db.collection_name.find().sort({field_key:1or-1}) Command : 1 2 3 4 5 // Ascending Order |db.details.find({},{\"_id\":0,\"car_id\":1,\"no of seats\":1}).sort({\"no of seats\": 1}) //Descending Order db.details.find({},{\"_id\":0,\"car_id\":1,\"no of seats\":1}).sort({\"no of seats\": -1}) Output: 12. MongoDB Indexing : Syntax : 1 2 3 4 5 6 7 8 9 10 11 //Creating an Index db.collection_name.createIndex({field_name:1or-1}) // Finding an Index db.collection_name.getIndexes() // Dropping an Index db.collection_name.dropIndex({index_name:1}) // Dropping all Indexes db.collection_name.dropIndexes() Command : 1 2 3 4 5 6 7 8 9 // Creating an Index db.details.createIndex({\"Brand\":1}) // Finding an Index db.details.getIndexes() // Dropping an Index db.details.dropIndex({\"Brand\":1})) // Dropping all Indexes db.details.dropIndexes() Output:","title":"practical 1"},{"location":"practical1/#practical-1","text":"","title":"Practical 1"},{"location":"practical1/#aim-practical-of-data-collection-data-curation-and-management-for-unstructured-data-nosqlmongodb","text":"","title":"Aim: Practical of Data collection, Data curation and management for Unstructured data (NoSQL/MongoDB)"},{"location":"practical1/#theory","text":"Data Collection : Data collection is defined as the procedure of collecting, measuring and analyzing accurate insights for research using standard validated techniques. A researcher can evaluate their hypothesis on the basis of collected data. In most cases, data collection is the primary and most important step for research, irrespective of the field of research. Data Curation : Data curation is the organization and integration of data collected from various sources. It involves annotation, publication and presentation of the data such that the value of the data is maintained over time, and the data remains available for reuse and preservation. Management of Unstructured Data : Structured data can be best understood with an example of MySQL table in which data is stored according to the data Type in their specific field and order. Whereas Unstructured Data refers to data which does not follow a specific table structure and can have variances in fields. Managing unstructured data using SQL based RDBMS is hard as there are a lot of Null values and type casting issues. Hence, it is more prevalent to use NoSQL databases like MongoDB which do not restrict database to certain type or schema.","title":"Theory:"},{"location":"practical1/#mongodb-operations","text":"","title":"MongoDB Operations:"},{"location":"practical1/#1-mongodb-create-database","text":"","title":"1. MongoDB Create Database :"},{"location":"practical1/#syntax","text":"1 show dbs 1 use database_name","title":"Syntax :"},{"location":"practical1/#command","text":"1 use cars","title":"Command :"},{"location":"practical1/#output","text":"","title":"Output:"},{"location":"practical1/#2-mongodb-drop-database","text":"","title":"2. MongoDB Drop Database :"},{"location":"practical1/#syntax_1","text":"1 db.dropDatabase()","title":"Syntax :"},{"location":"practical1/#command_1","text":"1 db.dropDatabase()","title":"Command :"},{"location":"practical1/#output_1","text":"","title":"Output:"},{"location":"practical1/#3-mongodb-create-collection","text":"","title":"3. MongoDB Create collection :"},{"location":"practical1/#syntax_2","text":"1 db.createCollection(\"name\",options..)","title":"Syntax :"},{"location":"practical1/#command_2","text":"1 db.createCollection(\"details\")","title":"Command :"},{"location":"practical1/#output_2","text":"","title":"Output:"},{"location":"practical1/#extra","text":"To view the list of collections : 1 show collections","title":"Extra:"},{"location":"practical1/#4-mongodb-drop-collection","text":"","title":"4. MongoDB Drop collection :"},{"location":"practical1/#syntax_3","text":"1 db.collection_name.drop()","title":"Syntax :"},{"location":"practical1/#command_3","text":"1 db.details.drop()","title":"Command :"},{"location":"practical1/#output_3","text":"","title":"Output:"},{"location":"practical1/#5-mongodb-insert-document","text":"","title":"5. MongoDB Insert Document :"},{"location":"practical1/#syntax_4","text":"1 db.collection_name.insert({key:value},options...)","title":"Syntax :"},{"location":"practical1/#command_4","text":"1 2 3 4 5 6 7 8 9 db.details.insert({ \"car_id\": 1, \"Brand\": \"Audi\", \"Model\": \"Audi Q8\", \"Mileage(Km/L)\": 9, \"price(Lakhs)\": 99.2, \"no of seats\": 7, \"Top speed(Km/H)\": 320 })","title":"Command :"},{"location":"practical1/#output_4","text":"","title":"Output:"},{"location":"practical1/#extra_1","text":"To Insert Multiple documents just send an array of documents 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 db.details.insert([{ \"car_id\": 2, \"Brand\": \"Honda\", \"Model\": \"Civic\", \"Mileage(Km/L)\": 17, \"price(Lakhs)\": 21, \"no of seats\": 5, \"Top speed(Km/H)\": 130 }, ... ... ... { \"car_id\": 10, \"Brand\": \"Renault\", \"Model\": \"Duster\", \"Mileage(Km/L)\": 14.3, \"price(Lakhs)\": 11.93, \"no of seats\": 5, \"Top speed(Km/H)\": 170 } ]) ... : : : :","title":"Extra :"},{"location":"practical1/#6-mongodb-query-document","text":"","title":"6. MongoDB Query Document :"},{"location":"practical1/#syntax_5","text":"1 2 3 db.collection_name.find() //For pretty printing db.collection_name.find().forEach(printjson)","title":"Syntax :"},{"location":"practical1/#command_5","text":"1 2 3 db.details.find() //For pretty printing db.details.find().forEach(printjson)","title":"Command :"},{"location":"practical1/#output_5","text":"","title":"Output:"},{"location":"practical1/#7-mongodb-update-document","text":"","title":"7. MongoDB Update Document:"},{"location":"practical1/#syntax_6","text":"1 2 3 db.collection_name.update(criteria,updated_data,options..) //or using save db.collection_name.save(object,options..)","title":"Syntax :"},{"location":"practical1/#command_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 db.details.update({\"Model\": \"Audi Q8\"},{$set:{\"Model\": \"Audi Q7\"}},{multi:true}) //or using save db.details.save({ \"_id\" : ObjectId(\"602a4509475bfe85686206cf\"), \"car_id\" : 1, \"Brand\" : \"Audi\", \"Model\" : \"Audi Q7\", \"Mileage(Km/L)\" : 9, \"price(Lakhs)\" : 99.2, \"no of seats\" : 7, \"Top speed(Km/H)\" : 320 })","title":"Command :"},{"location":"practical1/#output_6","text":"","title":"Output:"},{"location":"practical1/#8-delete-document-in-mongodb","text":"","title":"8. Delete document in MongoDB :"},{"location":"practical1/#syntax_7","text":"1 db.collection_name.remove(delete_criteria,options...)","title":"Syntax :"},{"location":"practical1/#command_7","text":"1 db.details.remove({car_id:1})","title":"Command :"},{"location":"practical1/#output_7","text":"","title":"Output:"},{"location":"practical1/#9-mongodb-projection","text":"","title":"9. MongoDB Projection :"},{"location":"practical1/#syntax_8","text":"1 db.collection_name.find({},{field_key:1or0})","title":"Syntax :"},{"location":"practical1/#command_8","text":"1 db.details.find({},{\"_id\":0,\"car_id\":1})","title":"Command :"},{"location":"practical1/#output_8","text":"","title":"Output:"},{"location":"practical1/#10-limit-and-skip-method-in-mongodb","text":"","title":"10. limit() and skip() method in MongoDB :"},{"location":"practical1/#limit","text":"","title":"limit()"},{"location":"practical1/#syntax_9","text":"1 db.collection_name.find().limit(number_of_documents)","title":"Syntax :"},{"location":"practical1/#command_9","text":"1 db.details.find({car_id:{$gt:5}}).limit(2).pretty()","title":"Command :"},{"location":"practical1/#output_9","text":"","title":"Output:"},{"location":"practical1/#skip","text":"","title":"skip()"},{"location":"practical1/#syntax_10","text":"1 db.collection_name.find().skip(number_of_documents)","title":"Syntax :"},{"location":"practical1/#command_10","text":"1 db.details.find({car_id:{$gt:5}}).limit(2).skip(2).pretty()","title":"Command :"},{"location":"practical1/#output_10","text":"","title":"Output:"},{"location":"practical1/#11-sorting-of-documents-in-mongodb","text":"","title":"11. Sorting of Documents in MongoDB :"},{"location":"practical1/#syntax_11","text":"1 db.collection_name.find().sort({field_key:1or-1})","title":"Syntax :"},{"location":"practical1/#command_11","text":"1 2 3 4 5 // Ascending Order |db.details.find({},{\"_id\":0,\"car_id\":1,\"no of seats\":1}).sort({\"no of seats\": 1}) //Descending Order db.details.find({},{\"_id\":0,\"car_id\":1,\"no of seats\":1}).sort({\"no of seats\": -1})","title":"Command :"},{"location":"practical1/#output_11","text":"","title":"Output:"},{"location":"practical1/#12-mongodb-indexing","text":"","title":"12. MongoDB Indexing :"},{"location":"practical1/#syntax_12","text":"1 2 3 4 5 6 7 8 9 10 11 //Creating an Index db.collection_name.createIndex({field_name:1or-1}) // Finding an Index db.collection_name.getIndexes() // Dropping an Index db.collection_name.dropIndex({index_name:1}) // Dropping all Indexes db.collection_name.dropIndexes()","title":"Syntax :"},{"location":"practical1/#command_12","text":"1 2 3 4 5 6 7 8 9 // Creating an Index db.details.createIndex({\"Brand\":1}) // Finding an Index db.details.getIndexes() // Dropping an Index db.details.dropIndex({\"Brand\":1})) // Dropping all Indexes db.details.dropIndexes()","title":"Command :"},{"location":"practical1/#output_12","text":"","title":"Output:"}]}