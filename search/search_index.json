{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Data Science Practicals : Practical 1: Aim: Practical of Data collection, Data curation and management for Unstructured data (NoSQL/MongoDB) Practical 2: Aim: Practical of Data collection, Data curation and management for Large-scale Data system (such as MongoDB) Practical 3: Aim: Practical of Time-series forecasting Practical 4: Aim: Practical of Clustering Practical 5: Aim: Practical of Simple/Multiple Linear Regression Practical 6: Aim : Practical of Decision Tree Practical 7: Aim :Practical of Hypothesis testing Practical 8: Aim :Practical of Analysis of Variance VIVA Section General Viva more coming soon....","title":"Home"},{"location":"#data-science","text":"","title":"Data Science"},{"location":"#practicals","text":"Practical 1: Aim: Practical of Data collection, Data curation and management for Unstructured data (NoSQL/MongoDB) Practical 2: Aim: Practical of Data collection, Data curation and management for Large-scale Data system (such as MongoDB) Practical 3: Aim: Practical of Time-series forecasting Practical 4: Aim: Practical of Clustering Practical 5: Aim: Practical of Simple/Multiple Linear Regression Practical 6: Aim : Practical of Decision Tree Practical 7: Aim :Practical of Hypothesis testing Practical 8: Aim :Practical of Analysis of Variance","title":"Practicals :"},{"location":"#viva-section","text":"General Viva more coming soon....","title":"VIVA Section"},{"location":"DSP1/","text":"Aim: Practical of Data collection, Data curation and management for Unstructured data (NoSQL/MongoDB) Theory: Data Collection : Data collection is defined as the procedure of collecting, measuring and analyzing accurate insights for research using standard validated techniques. A researcher can evaluate their hypothesis on the basis of collected data. In most cases, data collection is the primary and most important step for research, irrespective of the field of research. Data Curation : Data curation is the organization and integration of data collected from various sources. It involves annotation, publication and presentation of the data such that the value of the data is maintained over time, and the data remains available for reuse and preservation. Management of Unstructured Data : Structured data can be best understood with an example of MySQL table in which data is stored according to the data Type in their specific field and order. Whereas Unstructured Data refers to data which does not follow a specific table structure and can have variances in fields. Managing unstructured data using SQL based RDBMS is hard as there are a lot of Null values and type casting issues. Hence, it is more prevalent to use NoSQL databases like MongoDB which do not restrict database to certain type or schema. MongoDB Operations: 1. MongoDB Create Database : show dbs Show dbs will print all the databases available in mongoDB. 1 show dbs use database_name use < database-name > will either create a new 1 use database_name Command : 1 2 show dbs use cars Output 2. MongoDB Drop Database : db.dropDatabase() This command will delete the database currently used. 1 db.dropDatabase() Command : 1 db.dropDatabase() Output 3. MongoDB Create collection : db.createCollection() This function will create a collection equivalent of creating a table in SQL. 1 db.createCollection(\"name\",options..) Command : 1 db.createCollection(\"details\") Output show collections To view the list of collections : 1 show collections Output 4. MongoDB Drop collection : db.collection_name.drop() This command will drop/remove/delete the collection in context. 1 db.collection_name.drop() Command : 1 db.details.drop() Output 5. MongoDB Insert Document : db.collection_name.insert() This command will insert single or multiple key value pairs in JSON format. 1 db.collection_name.insert({key:value}, options...) Command : 1 2 3 4 5 6 7 8 9 db.details.insert({ \"car_id\": 1, \"Brand\": \"Audi\", \"Model\": \"Audi Q8\", \"Mileage(Km/L)\": 9, \"price(Lakhs)\": 99.2, \"no of seats\": 7, \"Top speed(Km/H)\": 320 }) Output Inserting multiple documents To Insert Multiple documents just send an array of documents 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 db.details.insert([{ \"car_id\": 2, \"Brand\": \"Honda\", \"Model\": \"Civic\", \"Mileage(Km/L)\": 17, \"price(Lakhs)\": 21, \"no of seats\": 5, \"Top speed(Km/H)\": 130 }, ... ... ... { \"car_id\": 10, \"Brand\": \"Renault\", \"Model\": \"Duster\", \"Mileage(Km/L)\": 14.3, \"price(Lakhs)\": 11.93, \"no of seats\": 5, \"Top speed(Km/H)\": 170 } ]) Output ... : : : : 6. MongoDB Query Document : db.collection_name.find() This command will find all values or specific key value as output. 1 2 3 db.collection_name.find() //For pretty printing db.collection_name.find().forEach(printjson) Command : 1 2 3 db.details.find() //For pretty printing db.details.find().forEach(printjson) Output 7. MongoDB Update Document: db.collection_name.update() This command will update any particular segment of data based on the criteria for selection in the collection. 1 2 3 db.collection_name.update(criteria,updated_data,options..) //or using save db.collection_name.save(object,options..) Command : 1 2 3 4 5 6 7 8 9 10 11 12 db.details.update({\"Model\": \"Audi Q8\"},{$set:{\"Model\": \"Audi Q7\"}},{multi:true}) //or using save db.details.save({ \"_id\" : ObjectId(\"602a4509475bfe85686206cf\"), \"car_id\" : 1, \"Brand\" : \"Audi\", \"Model\" : \"Audi Q7\", \"Mileage(Km/L)\" : 9, \"price(Lakhs)\" : 99.2, \"no of seats\" : 7, \"Top speed(Km/H)\" : 320 }) Output 8. Delete document in MongoDB : db.collection_name.remove() This command will delete/remove any particular section of data based on the criteria of selecting and deleting that piece of collection. 1 db.collection_name.remove(delete_criteria,options...) Command : 1 db.details.remove({car_id:1}) Output 9. MongoDB Projection : db.collection_name.find() This command will list down the data with only the specified data parameters after selecting it from the collection. 1 db.collection_name.find({},{field_key:1or0}) Command : 1 db.details.find({},{\"_id\":0,\"car_id\":1}) Output 10. limit() and skip() method in MongoDB : limit() This command will limit the number of data listed in the output. 1 db.collection_name.find().limit(number_of_documents) Command : 1 db.details.find({car_id:{$gt:5}}).limit(2).pretty() Output skip() This command will skip some of the documents based on the number. 1 db.collection_name.find().skip(number_of_documents) Command : 1 db.details.find({car_id:{$gt:5}}).limit(2).skip(2).pretty() Output 11. Sorting of Documents in MongoDB : sort() This command will sort the document in ascending or descending order of certain field key such as price or id. 1 db.collection_name.find().sort({field_key:1or-1}) Command : 1 2 3 4 5 // Ascending Order |db.details.find({},{\"_id\":0,\"car_id\":1,\"no of seats\":1}).sort({\"no of seats\": 1}) //Descending Order db.details.find({},{\"_id\":0,\"car_id\":1,\"no of seats\":1}).sort({\"no of seats\": -1}) Output 12. MongoDB Indexing : Indexes An index in MongoDB is a special data structure that holds the data of few fields of documents on which the index is created. Indexes improve the speed of search operations in database because instead of searching the whole document, the search is performed on the indexes that hold only few fields. On the other hand, having too many indexes can hamper the performance of insert, update and delete operations because of the additional write and additional data space used by indexes. 1 2 3 4 5 6 7 8 //Creating an Index db.collection_name.createIndex({field_name:1or-1}) // Finding an Index db.collection_name.getIndexes() // Dropping an Index db.collection_name.dropIndex({index_name:1}) // Dropping all Indexes db.collection_name.dropIndexes() Command : 1 2 3 4 5 6 7 8 9 // Creating an Index db.details.createIndex({\"Brand\":1}) // Finding an Index db.details.getIndexes() // Dropping an Index db.details.dropIndex({\"Brand\":1})) // Dropping all Indexes db.details.dropIndexes() Output","title":"Practical 1"},{"location":"DSP1/#aim-practical-of-data-collection-data-curation-and-management-for-unstructured-data-nosqlmongodb","text":"","title":"Aim: Practical of Data collection, Data curation and management for Unstructured data (NoSQL/MongoDB)"},{"location":"DSP1/#theory","text":"Data Collection : Data collection is defined as the procedure of collecting, measuring and analyzing accurate insights for research using standard validated techniques. A researcher can evaluate their hypothesis on the basis of collected data. In most cases, data collection is the primary and most important step for research, irrespective of the field of research. Data Curation : Data curation is the organization and integration of data collected from various sources. It involves annotation, publication and presentation of the data such that the value of the data is maintained over time, and the data remains available for reuse and preservation. Management of Unstructured Data : Structured data can be best understood with an example of MySQL table in which data is stored according to the data Type in their specific field and order. Whereas Unstructured Data refers to data which does not follow a specific table structure and can have variances in fields. Managing unstructured data using SQL based RDBMS is hard as there are a lot of Null values and type casting issues. Hence, it is more prevalent to use NoSQL databases like MongoDB which do not restrict database to certain type or schema.","title":"Theory:"},{"location":"DSP1/#mongodb-operations","text":"","title":"MongoDB Operations:"},{"location":"DSP1/#1-mongodb-create-database","text":"show dbs Show dbs will print all the databases available in mongoDB. 1 show dbs use database_name use < database-name > will either create a new 1 use database_name","title":"1. MongoDB Create Database :"},{"location":"DSP1/#command","text":"1 2 show dbs use cars Output","title":"Command :"},{"location":"DSP1/#2-mongodb-drop-database","text":"db.dropDatabase() This command will delete the database currently used. 1 db.dropDatabase()","title":"2. MongoDB Drop Database :"},{"location":"DSP1/#command_1","text":"1 db.dropDatabase() Output","title":"Command :"},{"location":"DSP1/#3-mongodb-create-collection","text":"db.createCollection() This function will create a collection equivalent of creating a table in SQL. 1 db.createCollection(\"name\",options..)","title":"3. MongoDB Create collection :"},{"location":"DSP1/#command_2","text":"1 db.createCollection(\"details\") Output show collections To view the list of collections : 1 show collections Output","title":"Command :"},{"location":"DSP1/#4-mongodb-drop-collection","text":"db.collection_name.drop() This command will drop/remove/delete the collection in context. 1 db.collection_name.drop()","title":"4. MongoDB Drop collection :"},{"location":"DSP1/#command_3","text":"1 db.details.drop() Output","title":"Command :"},{"location":"DSP1/#5-mongodb-insert-document","text":"db.collection_name.insert() This command will insert single or multiple key value pairs in JSON format. 1 db.collection_name.insert({key:value}, options...)","title":"5. MongoDB Insert Document :"},{"location":"DSP1/#command_4","text":"1 2 3 4 5 6 7 8 9 db.details.insert({ \"car_id\": 1, \"Brand\": \"Audi\", \"Model\": \"Audi Q8\", \"Mileage(Km/L)\": 9, \"price(Lakhs)\": 99.2, \"no of seats\": 7, \"Top speed(Km/H)\": 320 }) Output Inserting multiple documents To Insert Multiple documents just send an array of documents 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 db.details.insert([{ \"car_id\": 2, \"Brand\": \"Honda\", \"Model\": \"Civic\", \"Mileage(Km/L)\": 17, \"price(Lakhs)\": 21, \"no of seats\": 5, \"Top speed(Km/H)\": 130 }, ... ... ... { \"car_id\": 10, \"Brand\": \"Renault\", \"Model\": \"Duster\", \"Mileage(Km/L)\": 14.3, \"price(Lakhs)\": 11.93, \"no of seats\": 5, \"Top speed(Km/H)\": 170 } ]) Output ... : : : :","title":"Command :"},{"location":"DSP1/#6-mongodb-query-document","text":"db.collection_name.find() This command will find all values or specific key value as output. 1 2 3 db.collection_name.find() //For pretty printing db.collection_name.find().forEach(printjson)","title":"6. MongoDB Query Document :"},{"location":"DSP1/#command_5","text":"1 2 3 db.details.find() //For pretty printing db.details.find().forEach(printjson) Output","title":"Command :"},{"location":"DSP1/#7-mongodb-update-document","text":"db.collection_name.update() This command will update any particular segment of data based on the criteria for selection in the collection. 1 2 3 db.collection_name.update(criteria,updated_data,options..) //or using save db.collection_name.save(object,options..)","title":"7. MongoDB Update Document:"},{"location":"DSP1/#command_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 db.details.update({\"Model\": \"Audi Q8\"},{$set:{\"Model\": \"Audi Q7\"}},{multi:true}) //or using save db.details.save({ \"_id\" : ObjectId(\"602a4509475bfe85686206cf\"), \"car_id\" : 1, \"Brand\" : \"Audi\", \"Model\" : \"Audi Q7\", \"Mileage(Km/L)\" : 9, \"price(Lakhs)\" : 99.2, \"no of seats\" : 7, \"Top speed(Km/H)\" : 320 }) Output","title":"Command :"},{"location":"DSP1/#8-delete-document-in-mongodb","text":"db.collection_name.remove() This command will delete/remove any particular section of data based on the criteria of selecting and deleting that piece of collection. 1 db.collection_name.remove(delete_criteria,options...)","title":"8. Delete document in MongoDB :"},{"location":"DSP1/#command_7","text":"1 db.details.remove({car_id:1}) Output","title":"Command :"},{"location":"DSP1/#9-mongodb-projection","text":"db.collection_name.find() This command will list down the data with only the specified data parameters after selecting it from the collection. 1 db.collection_name.find({},{field_key:1or0})","title":"9. MongoDB Projection :"},{"location":"DSP1/#command_8","text":"1 db.details.find({},{\"_id\":0,\"car_id\":1}) Output","title":"Command :"},{"location":"DSP1/#10-limit-and-skip-method-in-mongodb","text":"limit() This command will limit the number of data listed in the output. 1 db.collection_name.find().limit(number_of_documents)","title":"10. limit() and skip() method in MongoDB :"},{"location":"DSP1/#command_9","text":"1 db.details.find({car_id:{$gt:5}}).limit(2).pretty() Output skip() This command will skip some of the documents based on the number. 1 db.collection_name.find().skip(number_of_documents)","title":"Command :"},{"location":"DSP1/#command_10","text":"1 db.details.find({car_id:{$gt:5}}).limit(2).skip(2).pretty() Output","title":"Command :"},{"location":"DSP1/#11-sorting-of-documents-in-mongodb","text":"sort() This command will sort the document in ascending or descending order of certain field key such as price or id. 1 db.collection_name.find().sort({field_key:1or-1})","title":"11. Sorting of Documents in MongoDB :"},{"location":"DSP1/#command_11","text":"1 2 3 4 5 // Ascending Order |db.details.find({},{\"_id\":0,\"car_id\":1,\"no of seats\":1}).sort({\"no of seats\": 1}) //Descending Order db.details.find({},{\"_id\":0,\"car_id\":1,\"no of seats\":1}).sort({\"no of seats\": -1}) Output","title":"Command :"},{"location":"DSP1/#12-mongodb-indexing","text":"Indexes An index in MongoDB is a special data structure that holds the data of few fields of documents on which the index is created. Indexes improve the speed of search operations in database because instead of searching the whole document, the search is performed on the indexes that hold only few fields. On the other hand, having too many indexes can hamper the performance of insert, update and delete operations because of the additional write and additional data space used by indexes. 1 2 3 4 5 6 7 8 //Creating an Index db.collection_name.createIndex({field_name:1or-1}) // Finding an Index db.collection_name.getIndexes() // Dropping an Index db.collection_name.dropIndex({index_name:1}) // Dropping all Indexes db.collection_name.dropIndexes()","title":"12. MongoDB Indexing :"},{"location":"DSP1/#command_12","text":"1 2 3 4 5 6 7 8 9 // Creating an Index db.details.createIndex({\"Brand\":1}) // Finding an Index db.details.getIndexes() // Dropping an Index db.details.dropIndex({\"Brand\":1})) // Dropping all Indexes db.details.dropIndexes() Output","title":"Command :"},{"location":"DSP2/","text":"Aim: Practical of Data collection, Data curation and management for Large Scale Data (NoSQL/MongoDB) Note First download mongo database tools from and unzip it into the installation folder. Download here Ignore if already installed. Save your excel file as csv file and run the command 1 mongoimport --db <database-name> --collection <collection-name> --type csv --headerline --file <path-to-csv-file>/<filename>.csv The further steps are similar to practical 1 Refer it here Practical 1","title":"Practical 2"},{"location":"DSP2/#aim-practical-of-data-collection-data-curation-and-management-for-large-scale-data-nosqlmongodb","text":"Note First download mongo database tools from and unzip it into the installation folder. Download here Ignore if already installed. Save your excel file as csv file and run the command 1 mongoimport --db <database-name> --collection <collection-name> --type csv --headerline --file <path-to-csv-file>/<filename>.csv The further steps are similar to practical 1 Refer it here Practical 1","title":"Aim: Practical of Data collection, Data curation and management for Large Scale Data (NoSQL/MongoDB)"},{"location":"DSP3/","text":"Aim : Practical of Time-series forecasting Theory: Time Series Forecasting As the name suggests, TS is a collection of data points collected at constant time intervals. These are analyzed to determine the long term trend so as to forecast the future or perform some other form of analysis. Arima Model ARIMA, short for \u2018Auto Regressive Integrated Moving Average\u2019 is actually a class of models that \u2018explains\u2019 a given time series based on its own past values, that is, its own lags and the lagged forecast errors, so that equation can be used to forecast future values. Code: First we will import the AirPassengers dataset command/parameter details data() Loads specified data sets, or list the available data sets. 1 data ( \"AirPassengers\" ) This command will show the class/type of dataset command/parameter details class() R possesses a simple generic function mechanism which can be used for an object-oriented style of programming. Method dispatch takes place based on the class of the first argument to the generic function. 1 class ( AirPassengers ) Output 'ts' This command will show the first row and first column name of dataset command/parameter details start()/end() Extract and encode the times the first and last observations were taken. Provided only for compatibility with S version 2. 1 start ( AirPassengers ) Output 1949 1 This command will show the last row and last column name of dataset 1 end ( AirPassengers ) Output 1960 12 This command will show the frequency of dataset command/parameter details frequency() this will return the frequency of the dataset. 1 frequency ( AirPassengers ) Output 12 This command will show the basic statistics summary of the dataset command/parameter details summary() summary is a generic function used to produce result summaries of the results of various model fitting functions. The function invokes particular methods which depend on the class of the first argument. 1 summary ( AirPassengers ) Output 1 2 Min. 1st Qu. Median Mean 3rd Qu. Max. 104.0 180.0 265.5 280.3 360.5 622.0 This command will plot a simple line graph of dataset command/parameter details plot() Generic function for plotting of R objects. For more details about the graphical parameter arguments, 1 plot ( AirPassengers ) Output This command will plot a simple line graph of dataset with a regression line command/parameter details abline() This function adds one or more straight lines through the current plot. reg= an object with a coefficient method for regression lm() lm is used to fit linear models. It can be used to carry out regression. time() creates the vector of times at which a time series was sampled. ~ Tilde, used for model formulae, can be either unary or binary 1 2 plot ( AirPassengers ) abline ( reg = lm ( AirPassengers ~ time ( AirPassengers ))) Output This command will plot a line graph of mean values of dataset command/parameter details aggregate() Splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form. FUN= a function to compute the summary statistics which can be applied to all data subsets. 1 plot ( aggregate ( AirPassengers , FUN = mean )) Output This command will just show the position of the datapoint or the observation in the entire cycle. command/parameter details cycle() gives the positions in the cycle of each observation. 1 cycle ( AirPassengers ) Output A Time Series: 12 \u00d7 12 Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec 1949 1 2 3 4 5 6 7 8 9 10 11 12 1950 1 2 3 4 5 6 7 8 9 10 11 12 1951 1 2 3 4 5 6 7 8 9 10 11 12 1952 1 2 3 4 5 6 7 8 9 10 11 12 1953 1 2 3 4 5 6 7 8 9 10 11 12 1954 1 2 3 4 5 6 7 8 9 10 11 12 1955 1 2 3 4 5 6 7 8 9 10 11 12 1956 1 2 3 4 5 6 7 8 9 10 11 12 1957 1 2 3 4 5 6 7 8 9 10 11 12 1958 1 2 3 4 5 6 7 8 9 10 11 12 1959 1 2 3 4 5 6 7 8 9 10 11 12 1960 1 2 3 4 5 6 7 8 9 10 11 12 Boxplot will just show plot out the boxes indicating min,max,variance and mean values all in one single graph command/parameter details boxplot() Produce box-and-whisker plot(s) of the given (grouped) values. 1 boxplot ( AirPassengers ~ cycle ( AirPassengers )) Output acf function will calculate autocovariance or autocorrelation function of the dataset command/parameter details acf() This function calls the acf function in the stats package and processes to drop lag-0 of the acf. It only works for univariate time series, so x below should be 1-dimensional. log() log returns the logarithm of the input 1 2 3 acf ( log ( AirPassengers ) ) Output command/parameter details acf() This function calls the acf function in the stats package and processes to drop lag-0 of the acf. It only works for univariate time series, so x below should be 1-dimensional. log() log returns the logarithm of the input diff() Returns suitably lagged and iterated differences. 1 2 3 4 5 acf ( diff ( log ( AirPassengers ) ) ) Output Next we will find arima value to predict the future values and plot a time series plot of the same. Note : ARIMA is an acronym that stands for AutoRegressive Integrated Moving Average. command/parameter details arima() Fit an ARIMA model to a univariate time series. log() log returns the logarithm of the input c() This is a generic function which combines its arguments. seasonal= A specification of the seasonal part of the ARIMA model, plus the period (which defaults to frequency(x)). This should be a list with components order and period, but a specification of just a numeric vector of length 3 will be turned into a suitable list with the specification as the order. period= list() Functions to construct, coerce and check for both kinds of R lists. order() order returns a permutation which rearranges its first argument into ascending or descending order, breaking ties by further arguments. sort.list is the same, using only one argument. See the examples for how to use these functions to sort data frames, etc. 1 2 3 4 5 6 7 ( fit <- arima ( log ( AirPassengers ), c ( 0 , 1 , 1 ), seasonal = list ( order = c ( 0 , 1 , 1 ), period = 12 ) ) ) Output 1 2 3 4 5 6 7 8 Call: arima(x = log(AirPassengers), order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12)) Coefficients: ma1 sma1 -0.4018 -0.5569 s.e. 0.0896 0.0731 sigma^2 estimated as 0.001348: log likelihood = 244.7, aic = -483.4 command/parameter details predict() predict is a generic function for predictions from the results of various model fitting functions. The function invokes particular methods which depend on the class of the first argument. n.ahead= the amount of future predictions 1 pred <- predict ( fit , n.ahead = 10 * 12 ) command/parameter details ts.plot() Plot several time series on a common plot. Unlike plot.ts the series can have a different time bases, but they should have the same frequency. 1 ts.plot ( AirPassengers , 2.718 ^ pred $ pred , log = \"y\" , lty = c ( 1 , 3 )) Output","title":"Practical 3"},{"location":"DSP3/#aim-practical-of-time-series-forecasting","text":"","title":"Aim : Practical of Time-series forecasting"},{"location":"DSP3/#theory","text":"","title":"Theory:"},{"location":"DSP3/#time-series-forecasting","text":"As the name suggests, TS is a collection of data points collected at constant time intervals. These are analyzed to determine the long term trend so as to forecast the future or perform some other form of analysis.","title":"Time Series Forecasting"},{"location":"DSP3/#arima-model","text":"ARIMA, short for \u2018Auto Regressive Integrated Moving Average\u2019 is actually a class of models that \u2018explains\u2019 a given time series based on its own past values, that is, its own lags and the lagged forecast errors, so that equation can be used to forecast future values.","title":"Arima Model"},{"location":"DSP3/#code","text":"First we will import the AirPassengers dataset command/parameter details data() Loads specified data sets, or list the available data sets. 1 data ( \"AirPassengers\" )","title":"Code:"},{"location":"DSP3/#this-command-will-show-the-classtype-of-dataset","text":"command/parameter details class() R possesses a simple generic function mechanism which can be used for an object-oriented style of programming. Method dispatch takes place based on the class of the first argument to the generic function. 1 class ( AirPassengers ) Output 'ts'","title":"This command will show the class/type of dataset"},{"location":"DSP3/#this-command-will-show-the-first-row-and-first-column-name-of-dataset","text":"command/parameter details start()/end() Extract and encode the times the first and last observations were taken. Provided only for compatibility with S version 2. 1 start ( AirPassengers ) Output 1949 1","title":"This command will show the first row and first column name of dataset"},{"location":"DSP3/#this-command-will-show-the-last-row-and-last-column-name-of-dataset","text":"1 end ( AirPassengers ) Output 1960 12","title":"This command will show the last row and last column name of dataset"},{"location":"DSP3/#this-command-will-show-the-frequency-of-dataset","text":"command/parameter details frequency() this will return the frequency of the dataset. 1 frequency ( AirPassengers ) Output 12","title":"This command will show the frequency of dataset"},{"location":"DSP3/#this-command-will-show-the-basic-statistics-summary-of-the-dataset","text":"command/parameter details summary() summary is a generic function used to produce result summaries of the results of various model fitting functions. The function invokes particular methods which depend on the class of the first argument. 1 summary ( AirPassengers ) Output 1 2 Min. 1st Qu. Median Mean 3rd Qu. Max. 104.0 180.0 265.5 280.3 360.5 622.0","title":"This command will show the basic statistics summary of the dataset"},{"location":"DSP3/#this-command-will-plot-a-simple-line-graph-of-dataset","text":"command/parameter details plot() Generic function for plotting of R objects. For more details about the graphical parameter arguments, 1 plot ( AirPassengers ) Output","title":"This command will plot a simple line graph of dataset"},{"location":"DSP3/#this-command-will-plot-a-simple-line-graph-of-dataset-with-a-regression-line","text":"command/parameter details abline() This function adds one or more straight lines through the current plot. reg= an object with a coefficient method for regression lm() lm is used to fit linear models. It can be used to carry out regression. time() creates the vector of times at which a time series was sampled. ~ Tilde, used for model formulae, can be either unary or binary 1 2 plot ( AirPassengers ) abline ( reg = lm ( AirPassengers ~ time ( AirPassengers ))) Output","title":"This command will plot a simple line graph of dataset with a regression line"},{"location":"DSP3/#this-command-will-plot-a-line-graph-of-mean-values-of-dataset","text":"command/parameter details aggregate() Splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form. FUN= a function to compute the summary statistics which can be applied to all data subsets. 1 plot ( aggregate ( AirPassengers , FUN = mean )) Output","title":"This command will plot a line graph of mean values of dataset"},{"location":"DSP3/#this-command-will-just-show-the-position-of-the-datapoint-or-the-observation-in-the-entire-cycle","text":"command/parameter details cycle() gives the positions in the cycle of each observation. 1 cycle ( AirPassengers ) Output A Time Series: 12 \u00d7 12 Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec 1949 1 2 3 4 5 6 7 8 9 10 11 12 1950 1 2 3 4 5 6 7 8 9 10 11 12 1951 1 2 3 4 5 6 7 8 9 10 11 12 1952 1 2 3 4 5 6 7 8 9 10 11 12 1953 1 2 3 4 5 6 7 8 9 10 11 12 1954 1 2 3 4 5 6 7 8 9 10 11 12 1955 1 2 3 4 5 6 7 8 9 10 11 12 1956 1 2 3 4 5 6 7 8 9 10 11 12 1957 1 2 3 4 5 6 7 8 9 10 11 12 1958 1 2 3 4 5 6 7 8 9 10 11 12 1959 1 2 3 4 5 6 7 8 9 10 11 12 1960 1 2 3 4 5 6 7 8 9 10 11 12","title":"This command will just show the position of the datapoint or the observation in the entire cycle."},{"location":"DSP3/#boxplot-will-just-show-plot-out-the-boxes-indicating-minmaxvariance-and-mean-values-all-in-one-single-graph","text":"command/parameter details boxplot() Produce box-and-whisker plot(s) of the given (grouped) values. 1 boxplot ( AirPassengers ~ cycle ( AirPassengers )) Output","title":"Boxplot will just show plot out the boxes indicating min,max,variance and mean values all in one single graph"},{"location":"DSP3/#acf-function-will-calculate-autocovariance-or-autocorrelation-function-of-the-dataset","text":"command/parameter details acf() This function calls the acf function in the stats package and processes to drop lag-0 of the acf. It only works for univariate time series, so x below should be 1-dimensional. log() log returns the logarithm of the input 1 2 3 acf ( log ( AirPassengers ) ) Output command/parameter details acf() This function calls the acf function in the stats package and processes to drop lag-0 of the acf. It only works for univariate time series, so x below should be 1-dimensional. log() log returns the logarithm of the input diff() Returns suitably lagged and iterated differences. 1 2 3 4 5 acf ( diff ( log ( AirPassengers ) ) ) Output","title":"acf function will calculate autocovariance or autocorrelation function of the dataset"},{"location":"DSP3/#next-we-will-find-arima-value-to-predict-the-future-values-and-plot-a-time-series-plot-of-the-same","text":"","title":"Next we will find arima value to predict the future values and plot a time series plot of the same."},{"location":"DSP3/#note-arima-is-an-acronym-that-stands-for-autoregressive-integrated-moving-average","text":"command/parameter details arima() Fit an ARIMA model to a univariate time series. log() log returns the logarithm of the input c() This is a generic function which combines its arguments. seasonal= A specification of the seasonal part of the ARIMA model, plus the period (which defaults to frequency(x)). This should be a list with components order and period, but a specification of just a numeric vector of length 3 will be turned into a suitable list with the specification as the order. period= list() Functions to construct, coerce and check for both kinds of R lists. order() order returns a permutation which rearranges its first argument into ascending or descending order, breaking ties by further arguments. sort.list is the same, using only one argument. See the examples for how to use these functions to sort data frames, etc. 1 2 3 4 5 6 7 ( fit <- arima ( log ( AirPassengers ), c ( 0 , 1 , 1 ), seasonal = list ( order = c ( 0 , 1 , 1 ), period = 12 ) ) ) Output 1 2 3 4 5 6 7 8 Call: arima(x = log(AirPassengers), order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12)) Coefficients: ma1 sma1 -0.4018 -0.5569 s.e. 0.0896 0.0731 sigma^2 estimated as 0.001348: log likelihood = 244.7, aic = -483.4 command/parameter details predict() predict is a generic function for predictions from the results of various model fitting functions. The function invokes particular methods which depend on the class of the first argument. n.ahead= the amount of future predictions 1 pred <- predict ( fit , n.ahead = 10 * 12 ) command/parameter details ts.plot() Plot several time series on a common plot. Unlike plot.ts the series can have a different time bases, but they should have the same frequency. 1 ts.plot ( AirPassengers , 2.718 ^ pred $ pred , log = \"y\" , lty = c ( 1 , 3 )) Output","title":"Note : ARIMA is an acronym that stands for AutoRegressive Integrated Moving Average."},{"location":"DSP4/","text":"Aim: Practical of Clustering Theory Clustering: Clustering is the task of dividing the population or data points into a number of groups such that data points in the same groups are more similar to other data points in the same group than those in other groups. In simple words, the aim is to segregate groups with similar traits and assign them into clusters. command/parameter details iris Numerous guides have been written on the exploration of this widely known dataset. Iris, introduced by Ronald Fisher in his 1936 paper The use of multiple measurements in taxonomic problems, contains three plant species (setosa, virginica, versicolor) and four features measured for each sample. These quantify the morphologic variation of the iris flower in its three species, all measurements given in centimeters. 1 iris Output A data.frame: 150 \u00d7 5 Sepal.Length Sepal.Width Petal.Length Petal.Width Species <dbl> <dbl> <dbl> <dbl> <fct> 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa 5.4 3.4 1.7 0.2 setosa 5.1 3.7 1.5 0.4 setosa 4.6 3.6 1.0 0.2 setosa 5.1 3.3 1.7 0.5 setosa 4.8 3.4 1.9 0.2 setosa 5.0 3.0 1.6 0.2 setosa 5.0 3.4 1.6 0.4 setosa 5.2 3.5 1.5 0.2 setosa 5.2 3.4 1.4 0.2 setosa 4.7 3.2 1.6 0.2 setosa \u22ee \u22ee \u22ee \u22ee \u22ee 6.9 3.2 5.7 2.3 virginica 5.6 2.8 4.9 2.0 virginica 7.7 2.8 6.7 2.0 virginica 6.3 2.7 4.9 1.8 virginica 6.7 3.3 5.7 2.1 virginica 7.2 3.2 6.0 1.8 virginica 6.2 2.8 4.8 1.8 virginica 6.1 3.0 4.9 1.8 virginica 6.4 2.8 5.6 2.1 virginica 7.2 3.0 5.8 1.6 virginica 7.4 2.8 6.1 1.9 virginica 7.9 3.8 6.4 2.0 virginica 6.4 2.8 5.6 2.2 virginica 6.3 2.8 5.1 1.5 virginica 6.1 2.6 5.6 1.4 virginica 7.7 3.0 6.1 2.3 virginica 6.3 3.4 5.6 2.4 virginica 6.4 3.1 5.5 1.8 virginica 6.0 3.0 4.8 1.8 virginica 6.9 3.1 5.4 2.1 virginica 6.7 3.1 5.6 2.4 virginica 6.9 3.1 5.1 2.3 virginica 5.8 2.7 5.1 1.9 virginica 6.8 3.2 5.9 2.3 virginica 6.7 3.3 5.7 2.5 virginica 6.7 3.0 5.2 2.3 virginica 6.3 2.5 5.0 1.9 virginica 6.5 3.0 5.2 2.0 virginica 6.2 3.4 5.4 2.3 virginica 5.9 3.0 5.1 1.8 virginica command/parameter details 1 summary ( iris ) Output 1 2 3 4 5 6 7 8 9 10 11 Sepal.Length Sepal.Width Petal.Length Petal.Width Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 Median :5.800 Median :3.000 Median :4.350 Median :1.300 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 Species setosa :50 versicolor:50 virginica :50 command/parameter details 1 plot ( iris [ c ( \"Petal.Length\" , \"Petal.Width\" )], col = \"orange\" ) Output 1 plot ( iris [ c ( \"Sepal.Length\" , \"Sepal.Width\" )], col = \"blue\" ) Output 1 newiris <- iris command/parameter details 1 newiris $ Species <- NULL 1 newiris Output A data.frame: 150 \u00d7 4 Sepal.Length Sepal.Width Petal.Length Petal.Width <dbl> <dbl> <dbl> <dbl> 5.1 3.5 1.4 0.2 4.9 3.0 1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.0 3.6 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.0 3.4 1.5 0.2 4.4 2.9 1.4 0.2 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.0 1.4 0.1 4.3 3.0 1.1 0.1 5.8 4.0 1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6 1.0 0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.0 3.0 1.6 0.2 5.0 3.4 1.6 0.4 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 \u22ee \u22ee \u22ee \u22ee 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.0 7.7 2.8 6.7 2.0 6.3 2.7 4.9 1.8 6.7 3.3 5.7 2.1 7.2 3.2 6.0 1.8 6.2 2.8 4.8 1.8 6.1 3.0 4.9 1.8 6.4 2.8 5.6 2.1 7.2 3.0 5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.0 6.4 2.8 5.6 2.2 6.3 2.8 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.0 6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8 6.0 3.0 4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.0 5.2 2.3 6.3 2.5 5.0 1.9 6.5 3.0 5.2 2.0 6.2 3.4 5.4 2.3 5.9 3.0 5.1 1.8 command/parameter details 1 ( kc <- kmeans ( newiris , 3 )) Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 K-means clustering with 3 clusters of sizes 33, 21, 96 Cluster means: Sepal.Length Sepal.Width Petal.Length Petal.Width 1 5.175758 3.624242 1.472727 0.2727273 2 4.738095 2.904762 1.790476 0.3523810 3 6.314583 2.895833 4.973958 1.7031250 Clustering vector: [1] 1 2 2 2 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 2 2 1 1 1 2 1 1 [38] 1 2 1 1 2 2 1 1 2 1 2 1 1 3 3 3 3 3 3 3 2 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 [75] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 [149] 3 3 Within cluster sum of squares by cluster: [1] 6.432121 17.669524 118.651875 (between_SS / total_SS = 79.0 %) Available components: [1] \"cluster\" \"centers\" \"totss\" \"withinss\" \"tot.withinss\" [6] \"betweenss\" \"size\" \"iter\" \"ifault\" command/parameter details 1 kc $ size Output 33 21 96 command/parameter details 1 kc $ cluster Output 1 2 2 2 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 2 2 1 1 1 2 1 1 1 2 1 1 2 2 1 1 2 1 2 1 1 3 3 3 3 3 3 3 2 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 command/parameter details 1 kc $ centers Output A matrix: 3 \u00d7 4 of type dbl Sepal.Length Sepal.Width Petal.Length Petal.Width 1 5.175758 3.624242 1.472727 0.2727273 2 4.738095 2.904762 1.790476 0.3523810 3 6.314583 2.895833 4.973958 1.7031250 command/parameter details 1 kc $ withinss Output 6.43212121212122 17.6695238095238 118.651875 command/parameter details 1 kc $ tot.withinss Output 142.753520021645 1 kc $ betweenss Output 538.617079978355 command/parameter details 1 table ( iris $ Species , kc $ cluster ) Output 1 1 2 3 setosa 33 17 0 versicolor 0 4 46 virginica 0 0 50 1 plot ( newiris [ c ( \"Sepal.Length\" , \"Sepal.Width\" )], col = kc $ Species ) Output 1 plot ( newiris [ c ( \"Petal.Length\" , \"Petal.Width\" )], col = kc $ Species ) Output command/parameter details 1 plot ( newiris [ c ( \"Sepal.Length\" , \"Sepal.Width\" )], col = kc $ cluster ) Output command/parameter details 1 plot ( newiris [ c ( \"Petal.Length\" , \"Petal.Width\" )], col = kc $ cluster ) Output command/parameter details 1 2 plot ( newiris [ c ( \"Sepal.Length\" , \"Sepal.Width\" )], col = kc $ cluster ) points ( kc $ centers [, c ( \"Sepal.Length\" , \"Sepal.Width\" )], col = 1 : 3 , pch = 8 , cex = 2 ) Output","title":"Practical 4"},{"location":"DSP4/#aim-practical-of-clustering","text":"","title":"Aim: Practical of Clustering"},{"location":"DSP4/#theory","text":"Clustering: Clustering is the task of dividing the population or data points into a number of groups such that data points in the same groups are more similar to other data points in the same group than those in other groups. In simple words, the aim is to segregate groups with similar traits and assign them into clusters. command/parameter details iris Numerous guides have been written on the exploration of this widely known dataset. Iris, introduced by Ronald Fisher in his 1936 paper The use of multiple measurements in taxonomic problems, contains three plant species (setosa, virginica, versicolor) and four features measured for each sample. These quantify the morphologic variation of the iris flower in its three species, all measurements given in centimeters. 1 iris Output A data.frame: 150 \u00d7 5 Sepal.Length Sepal.Width Petal.Length Petal.Width Species <dbl> <dbl> <dbl> <dbl> <fct> 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa 5.4 3.4 1.7 0.2 setosa 5.1 3.7 1.5 0.4 setosa 4.6 3.6 1.0 0.2 setosa 5.1 3.3 1.7 0.5 setosa 4.8 3.4 1.9 0.2 setosa 5.0 3.0 1.6 0.2 setosa 5.0 3.4 1.6 0.4 setosa 5.2 3.5 1.5 0.2 setosa 5.2 3.4 1.4 0.2 setosa 4.7 3.2 1.6 0.2 setosa \u22ee \u22ee \u22ee \u22ee \u22ee 6.9 3.2 5.7 2.3 virginica 5.6 2.8 4.9 2.0 virginica 7.7 2.8 6.7 2.0 virginica 6.3 2.7 4.9 1.8 virginica 6.7 3.3 5.7 2.1 virginica 7.2 3.2 6.0 1.8 virginica 6.2 2.8 4.8 1.8 virginica 6.1 3.0 4.9 1.8 virginica 6.4 2.8 5.6 2.1 virginica 7.2 3.0 5.8 1.6 virginica 7.4 2.8 6.1 1.9 virginica 7.9 3.8 6.4 2.0 virginica 6.4 2.8 5.6 2.2 virginica 6.3 2.8 5.1 1.5 virginica 6.1 2.6 5.6 1.4 virginica 7.7 3.0 6.1 2.3 virginica 6.3 3.4 5.6 2.4 virginica 6.4 3.1 5.5 1.8 virginica 6.0 3.0 4.8 1.8 virginica 6.9 3.1 5.4 2.1 virginica 6.7 3.1 5.6 2.4 virginica 6.9 3.1 5.1 2.3 virginica 5.8 2.7 5.1 1.9 virginica 6.8 3.2 5.9 2.3 virginica 6.7 3.3 5.7 2.5 virginica 6.7 3.0 5.2 2.3 virginica 6.3 2.5 5.0 1.9 virginica 6.5 3.0 5.2 2.0 virginica 6.2 3.4 5.4 2.3 virginica 5.9 3.0 5.1 1.8 virginica command/parameter details 1 summary ( iris ) Output 1 2 3 4 5 6 7 8 9 10 11 Sepal.Length Sepal.Width Petal.Length Petal.Width Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 Median :5.800 Median :3.000 Median :4.350 Median :1.300 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 Species setosa :50 versicolor:50 virginica :50 command/parameter details 1 plot ( iris [ c ( \"Petal.Length\" , \"Petal.Width\" )], col = \"orange\" ) Output 1 plot ( iris [ c ( \"Sepal.Length\" , \"Sepal.Width\" )], col = \"blue\" ) Output 1 newiris <- iris command/parameter details 1 newiris $ Species <- NULL 1 newiris Output A data.frame: 150 \u00d7 4 Sepal.Length Sepal.Width Petal.Length Petal.Width <dbl> <dbl> <dbl> <dbl> 5.1 3.5 1.4 0.2 4.9 3.0 1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.0 3.6 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.0 3.4 1.5 0.2 4.4 2.9 1.4 0.2 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.0 1.4 0.1 4.3 3.0 1.1 0.1 5.8 4.0 1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6 1.0 0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.0 3.0 1.6 0.2 5.0 3.4 1.6 0.4 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 \u22ee \u22ee \u22ee \u22ee 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.0 7.7 2.8 6.7 2.0 6.3 2.7 4.9 1.8 6.7 3.3 5.7 2.1 7.2 3.2 6.0 1.8 6.2 2.8 4.8 1.8 6.1 3.0 4.9 1.8 6.4 2.8 5.6 2.1 7.2 3.0 5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.0 6.4 2.8 5.6 2.2 6.3 2.8 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.0 6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8 6.0 3.0 4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.0 5.2 2.3 6.3 2.5 5.0 1.9 6.5 3.0 5.2 2.0 6.2 3.4 5.4 2.3 5.9 3.0 5.1 1.8 command/parameter details 1 ( kc <- kmeans ( newiris , 3 )) Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 K-means clustering with 3 clusters of sizes 33, 21, 96 Cluster means: Sepal.Length Sepal.Width Petal.Length Petal.Width 1 5.175758 3.624242 1.472727 0.2727273 2 4.738095 2.904762 1.790476 0.3523810 3 6.314583 2.895833 4.973958 1.7031250 Clustering vector: [1] 1 2 2 2 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 2 2 1 1 1 2 1 1 [38] 1 2 1 1 2 2 1 1 2 1 2 1 1 3 3 3 3 3 3 3 2 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 [75] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 [149] 3 3 Within cluster sum of squares by cluster: [1] 6.432121 17.669524 118.651875 (between_SS / total_SS = 79.0 %) Available components: [1] \"cluster\" \"centers\" \"totss\" \"withinss\" \"tot.withinss\" [6] \"betweenss\" \"size\" \"iter\" \"ifault\" command/parameter details 1 kc $ size Output 33 21 96 command/parameter details 1 kc $ cluster Output 1 2 2 2 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 2 2 1 1 1 2 1 1 1 2 1 1 2 2 1 1 2 1 2 1 1 3 3 3 3 3 3 3 2 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 command/parameter details 1 kc $ centers Output A matrix: 3 \u00d7 4 of type dbl Sepal.Length Sepal.Width Petal.Length Petal.Width 1 5.175758 3.624242 1.472727 0.2727273 2 4.738095 2.904762 1.790476 0.3523810 3 6.314583 2.895833 4.973958 1.7031250 command/parameter details 1 kc $ withinss Output 6.43212121212122 17.6695238095238 118.651875 command/parameter details 1 kc $ tot.withinss Output 142.753520021645 1 kc $ betweenss Output 538.617079978355 command/parameter details 1 table ( iris $ Species , kc $ cluster ) Output 1 1 2 3 setosa 33 17 0 versicolor 0 4 46 virginica 0 0 50 1 plot ( newiris [ c ( \"Sepal.Length\" , \"Sepal.Width\" )], col = kc $ Species ) Output 1 plot ( newiris [ c ( \"Petal.Length\" , \"Petal.Width\" )], col = kc $ Species ) Output command/parameter details 1 plot ( newiris [ c ( \"Sepal.Length\" , \"Sepal.Width\" )], col = kc $ cluster ) Output command/parameter details 1 plot ( newiris [ c ( \"Petal.Length\" , \"Petal.Width\" )], col = kc $ cluster ) Output command/parameter details 1 2 plot ( newiris [ c ( \"Sepal.Length\" , \"Sepal.Width\" )], col = kc $ cluster ) points ( kc $ centers [, c ( \"Sepal.Length\" , \"Sepal.Width\" )], col = 1 : 3 , pch = 8 , cex = 2 ) Output","title":"Theory"},{"location":"DSP5/","text":"Aim: Practical of Simple/Multiple Linear Regression Data-set Data Set used here : View LungCapData.csv Download LungCapData.csv command/parameter details 1 lungcapdata <- read.csv ( 'LungCapData.csv' , header = T ) command/parameter details 1 attach ( lungcapdata ) command/parameter details 1 names ( lungcapdata ) Output 'LungCap' 'Age' 'Height' 'Smoke' 'Gender' 'Caesarean' command/parameter details 1 class ( Age ) Output 'integer' 1 class ( LungCap ) Output 'numeric' command/parameter details 1 plot ( Age , LungCap , main = \"Scatterplot\" , col = \"blue\" ) Output command/parameter details 1 cor ( Age , LungCap ) Output 0.819674897498941 command/parameter details 1 mod <- lm ( LungCap ~ Age ) 1 summary ( mod ) Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Call: lm(formula = LungCap ~ Age) Residuals: Min 1Q Median 3Q Max -4.7799 -1.0203 -0.0005 0.9789 4.2650 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) 1.14686 0.18353 6.249 7.06e-10 *** Age 0.54485 0.01416 38.476 < 2e-16 *** --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Residual standard error: 1.526 on 723 degrees of freedom Multiple R-squared: 0.6719, Adjusted R-squared: 0.6714 F-statistic: 1480 on 1 and 723 DF, p-value: < 2.2e-16 command/parameter details 1 attributes ( mod ) Output $names 'coefficients' 'residuals' 'effects' 'rank' 'fitted.values' 'assign' 'qr' 'df.residual' 'xlevels' 'call' 'terms' 'model' $class 'lm' command/parameter details 1 mod $ coefficients Output (Intercept) 1.14685780537197 Age 0.544848393320501 command/parameter details 1 2 plot ( Age , LungCap , main = \"Scatterplot\" , col = \"blue\" ) abline ( mod , col = 2 , lwd = 3 ) Output command/parameter details 1 confint ( mod ) Output A matrix: 2 \u00d7 2 of type dbl 2.5 % 97.5 % (Intercept) 0.7865454 1.5071702 Age 0.5170471 0.5726497 command/parameter details 1 confint ( mod , level = 0.99 ) Output A matrix: 2 \u00d7 2 of type dbl 0.5 % 99.5 % (Intercept) 0.6728686 1.6208470 Age 0.5082759 0.5814209 command/parameter details 1 summary ( mod ) Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Call: lm(formula = LungCap ~ Age) Residuals: Min 1Q Median 3Q Max -4.7799 -1.0203 -0.0005 0.9789 4.2650 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) 1.14686 0.18353 6.249 7.06e-10 *** Age 0.54485 0.01416 38.476 < 2e-16 *** --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Residual standard error: 1.526 on 723 degrees of freedom Multiple R-squared: 0.6719, Adjusted R-squared: 0.6714 F-statistic: 1480 on 1 and 723 DF, p-value: < 2.2e-16 command/parameter details 1 anova ( mod ) Output A anova: 2 \u00d7 5 Df Sum Sq Mean Sq F value Pr(>F) <int> <dbl> <dbl> <dbl> <dbl> Age 1 3446.995 3446.994814 1480.374 4.077172e-177 Residuals 723 1683.478 2.328461 NA NA Multiple Regression command/parameter details 1 lungcapdata <- read.csv ( 'LungCapData.csv' , header = T ) command/parameter details 1 attach ( lungcapdata ) Output 1 2 3 The following objects are masked from lungcapdata (pos = 3): Age, Caesarean, Gender, Height, LungCap, Smoke command/parameter details 1 names ( lungcapdata ) Output 'LungCap' 'Age' 'Height' 'Smoke' 'Gender' 'Caesarean' command/parameter details 1 class ( Age ) Output 'integer' command/parameter details 1 class ( Smoke ) Output 'factor' command/parameter details 1 levels ( Smoke ) Output 'no' 'yes' command/parameter details 1 model1 <- lm ( LungCap ~ Age + Height ) command/parameter details 1 summary ( model1 ) Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Call: lm(formula = LungCap ~ Age + Height) Residuals: Min 1Q Median 3Q Max -3.4080 -0.7097 -0.0078 0.7167 3.1679 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) -11.747065 0.476899 -24.632 < 2e-16 *** Age 0.126368 0.017851 7.079 3.45e-12 *** Height 0.278432 0.009926 28.051 < 2e-16 *** --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Residual standard error: 1.056 on 722 degrees of freedom Multiple R-squared: 0.843, Adjusted R-squared: 0.8425 F-statistic: 1938 on 2 and 722 DF, p-value: < 2.2e-16 command/parameter details 1 cor ( Age , Height , method = \"pearson\" ) Output 0.835736836407944 command/parameter details 1 confint ( model1 , conf.level = 0.95 ) Output A matrix: 3 \u00d7 2 of type dbl 2.5 % 97.5 % (Intercept) -12.68333877 -10.8107918 Age 0.09132215 0.1614142 Height 0.25894454 0.2979192 command/parameter details 1 model2 <- lm ( LungCap ~ Age + Height + Smoke + Gender + Caesarean ) command/parameter details 1 summary ( model2 ) Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Call: lm(formula = LungCap ~ Age + Height + Smoke + Gender + Caesarean) Residuals: Min 1Q Median 3Q Max -3.3388 -0.7200 0.0444 0.7093 3.0172 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) -11.32249 0.47097 -24.041 < 2e-16 *** Age 0.16053 0.01801 8.915 < 2e-16 *** Height 0.26411 0.01006 26.248 < 2e-16 *** Smokeyes -0.60956 0.12598 -4.839 1.60e-06 *** Gendermale 0.38701 0.07966 4.858 1.45e-06 *** Caesareanyes -0.21422 0.09074 -2.361 0.0185 * --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Residual standard error: 1.02 on 719 degrees of freedom Multiple R-squared: 0.8542, Adjusted R-squared: 0.8532 F-statistic: 842.8 on 5 and 719 DF, p-value: < 2.2e-16 command/parameter details 1 plot ( model2 , col = 'brown' ) Output","title":"Practical 5"},{"location":"DSP5/#aim-practical-of-simplemultiple-linear-regression","text":"Data-set Data Set used here : View LungCapData.csv Download LungCapData.csv command/parameter details 1 lungcapdata <- read.csv ( 'LungCapData.csv' , header = T ) command/parameter details 1 attach ( lungcapdata ) command/parameter details 1 names ( lungcapdata ) Output 'LungCap' 'Age' 'Height' 'Smoke' 'Gender' 'Caesarean' command/parameter details 1 class ( Age ) Output 'integer' 1 class ( LungCap ) Output 'numeric' command/parameter details 1 plot ( Age , LungCap , main = \"Scatterplot\" , col = \"blue\" ) Output command/parameter details 1 cor ( Age , LungCap ) Output 0.819674897498941 command/parameter details 1 mod <- lm ( LungCap ~ Age ) 1 summary ( mod ) Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Call: lm(formula = LungCap ~ Age) Residuals: Min 1Q Median 3Q Max -4.7799 -1.0203 -0.0005 0.9789 4.2650 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) 1.14686 0.18353 6.249 7.06e-10 *** Age 0.54485 0.01416 38.476 < 2e-16 *** --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Residual standard error: 1.526 on 723 degrees of freedom Multiple R-squared: 0.6719, Adjusted R-squared: 0.6714 F-statistic: 1480 on 1 and 723 DF, p-value: < 2.2e-16 command/parameter details 1 attributes ( mod ) Output $names 'coefficients' 'residuals' 'effects' 'rank' 'fitted.values' 'assign' 'qr' 'df.residual' 'xlevels' 'call' 'terms' 'model' $class 'lm' command/parameter details 1 mod $ coefficients Output (Intercept) 1.14685780537197 Age 0.544848393320501 command/parameter details 1 2 plot ( Age , LungCap , main = \"Scatterplot\" , col = \"blue\" ) abline ( mod , col = 2 , lwd = 3 ) Output command/parameter details 1 confint ( mod ) Output A matrix: 2 \u00d7 2 of type dbl 2.5 % 97.5 % (Intercept) 0.7865454 1.5071702 Age 0.5170471 0.5726497 command/parameter details 1 confint ( mod , level = 0.99 ) Output A matrix: 2 \u00d7 2 of type dbl 0.5 % 99.5 % (Intercept) 0.6728686 1.6208470 Age 0.5082759 0.5814209 command/parameter details 1 summary ( mod ) Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Call: lm(formula = LungCap ~ Age) Residuals: Min 1Q Median 3Q Max -4.7799 -1.0203 -0.0005 0.9789 4.2650 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) 1.14686 0.18353 6.249 7.06e-10 *** Age 0.54485 0.01416 38.476 < 2e-16 *** --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Residual standard error: 1.526 on 723 degrees of freedom Multiple R-squared: 0.6719, Adjusted R-squared: 0.6714 F-statistic: 1480 on 1 and 723 DF, p-value: < 2.2e-16 command/parameter details 1 anova ( mod ) Output A anova: 2 \u00d7 5 Df Sum Sq Mean Sq F value Pr(>F) <int> <dbl> <dbl> <dbl> <dbl> Age 1 3446.995 3446.994814 1480.374 4.077172e-177 Residuals 723 1683.478 2.328461 NA NA","title":"Aim: Practical of Simple/Multiple Linear Regression"},{"location":"DSP5/#multiple-regression","text":"command/parameter details 1 lungcapdata <- read.csv ( 'LungCapData.csv' , header = T ) command/parameter details 1 attach ( lungcapdata ) Output 1 2 3 The following objects are masked from lungcapdata (pos = 3): Age, Caesarean, Gender, Height, LungCap, Smoke command/parameter details 1 names ( lungcapdata ) Output 'LungCap' 'Age' 'Height' 'Smoke' 'Gender' 'Caesarean' command/parameter details 1 class ( Age ) Output 'integer' command/parameter details 1 class ( Smoke ) Output 'factor' command/parameter details 1 levels ( Smoke ) Output 'no' 'yes' command/parameter details 1 model1 <- lm ( LungCap ~ Age + Height ) command/parameter details 1 summary ( model1 ) Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Call: lm(formula = LungCap ~ Age + Height) Residuals: Min 1Q Median 3Q Max -3.4080 -0.7097 -0.0078 0.7167 3.1679 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) -11.747065 0.476899 -24.632 < 2e-16 *** Age 0.126368 0.017851 7.079 3.45e-12 *** Height 0.278432 0.009926 28.051 < 2e-16 *** --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Residual standard error: 1.056 on 722 degrees of freedom Multiple R-squared: 0.843, Adjusted R-squared: 0.8425 F-statistic: 1938 on 2 and 722 DF, p-value: < 2.2e-16 command/parameter details 1 cor ( Age , Height , method = \"pearson\" ) Output 0.835736836407944 command/parameter details 1 confint ( model1 , conf.level = 0.95 ) Output A matrix: 3 \u00d7 2 of type dbl 2.5 % 97.5 % (Intercept) -12.68333877 -10.8107918 Age 0.09132215 0.1614142 Height 0.25894454 0.2979192 command/parameter details 1 model2 <- lm ( LungCap ~ Age + Height + Smoke + Gender + Caesarean ) command/parameter details 1 summary ( model2 ) Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Call: lm(formula = LungCap ~ Age + Height + Smoke + Gender + Caesarean) Residuals: Min 1Q Median 3Q Max -3.3388 -0.7200 0.0444 0.7093 3.0172 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) -11.32249 0.47097 -24.041 < 2e-16 *** Age 0.16053 0.01801 8.915 < 2e-16 *** Height 0.26411 0.01006 26.248 < 2e-16 *** Smokeyes -0.60956 0.12598 -4.839 1.60e-06 *** Gendermale 0.38701 0.07966 4.858 1.45e-06 *** Caesareanyes -0.21422 0.09074 -2.361 0.0185 * --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Residual standard error: 1.02 on 719 degrees of freedom Multiple R-squared: 0.8542, Adjusted R-squared: 0.8532 F-statistic: 842.8 on 5 and 719 DF, p-value: < 2.2e-16 command/parameter details 1 plot ( model2 , col = 'brown' ) Output","title":"Multiple Regression"},{"location":"DSP6/","text":"Aim : Practical of Decision Tree Data-set Data Set used here : View fitnessAppLog.csv Download fitnessAppLog.csv command/parameter details 1 fitappdata <- read.csv ( 'fitnessAppLog.csv' , header = T ) command/parameter details 1 attach ( fitappdata ) command/parameter details 1 library ( rpart ) command/parameter details 1 library ( rpart.plot ) command/parameter details 1 names ( fitappdata ) Output 'Incomes' 'GymVisits' 'State' 'Hours' 'PayOrNot' command/parameter details 1 model <- rpart ( PayOrNot ~ Incomes + GymVisits + State , data = fitappdata ) command/parameter details 1 rpart.plot ( model , extra = 104 ) Output command/parameter details 1 fitappdata Output A data.frame: 100 \u00d7 5 Incomes GymVisits State Hours PayOrNot <int> <int> <fct> <dbl> <fct> 100 4 TX 9.3 Yes 50 3 CA 4.8 No 100 4 TX 8.9 Yes 100 2 NY 6.5 Yes 50 2 MD 4.2 No 80 2 CA 6.2 No 75 3 WA 7.4 No 65 4 SD 6.0 No 90 3 ND 7.6 Yes 90 2 TX 6.1 No 100 1 TX 9.3 Yes 50 3 CA 4.8 No 100 4 TX 8.9 No 100 2 NY 6.5 No 50 2 MD 4.2 No 80 0 CA 6.2 No 75 3 WA 7.4 No 65 4 SD 6.0 No 90 3 ND 7.6 No 90 2 TX 6.1 No 100 4 TX 9.3 Yes 50 0 CA 4.8 No 100 4 TX 8.9 No 100 2 NY 6.5 No 50 2 MD 4.2 No 80 2 CA 6.2 No 75 3 WA 7.4 No 65 4 SD 6.0 No 90 3 ND 7.6 No 90 2 TX 6.1 No \u22ee \u22ee \u22ee \u22ee \u22ee 100 6 TX 9.3 Yes 50 3 CA 4.8 No 100 4 TX 8.9 Yes 100 2 NY 6.5 No 50 2 MD 4.2 No 80 2 CA 6.2 No 75 3 WA 7.4 No 65 4 SD 6.0 No 90 3 ND 7.6 No 90 2 TX 6.1 No 100 4 TX 9.3 Yes 50 3 CA 4.8 No 100 4 TX 8.9 Yes 40 6 NY 6.5 No 50 2 MD 4.2 No 80 2 CA 6.2 No 75 3 WA 7.4 Yes 65 4 SD 6.0 No 90 3 ND 7.6 Yes 90 2 TX 6.1 No 100 4 TX 9.3 Yes 50 3 CA 4.8 No 100 4 TX 8.9 Yes 100 2 NY 6.5 No 50 2 MD 4.2 No 80 2 CA 6.2 No 75 3 WA 7.4 Yes 65 4 SD 6.0 No 90 3 ND 7.6 Yes 90 2 TX 6.1 No","title":"Practical 6"},{"location":"DSP6/#aim-practical-of-decision-tree","text":"Data-set Data Set used here : View fitnessAppLog.csv Download fitnessAppLog.csv command/parameter details 1 fitappdata <- read.csv ( 'fitnessAppLog.csv' , header = T ) command/parameter details 1 attach ( fitappdata ) command/parameter details 1 library ( rpart ) command/parameter details 1 library ( rpart.plot ) command/parameter details 1 names ( fitappdata ) Output 'Incomes' 'GymVisits' 'State' 'Hours' 'PayOrNot' command/parameter details 1 model <- rpart ( PayOrNot ~ Incomes + GymVisits + State , data = fitappdata ) command/parameter details 1 rpart.plot ( model , extra = 104 ) Output command/parameter details 1 fitappdata Output A data.frame: 100 \u00d7 5 Incomes GymVisits State Hours PayOrNot <int> <int> <fct> <dbl> <fct> 100 4 TX 9.3 Yes 50 3 CA 4.8 No 100 4 TX 8.9 Yes 100 2 NY 6.5 Yes 50 2 MD 4.2 No 80 2 CA 6.2 No 75 3 WA 7.4 No 65 4 SD 6.0 No 90 3 ND 7.6 Yes 90 2 TX 6.1 No 100 1 TX 9.3 Yes 50 3 CA 4.8 No 100 4 TX 8.9 No 100 2 NY 6.5 No 50 2 MD 4.2 No 80 0 CA 6.2 No 75 3 WA 7.4 No 65 4 SD 6.0 No 90 3 ND 7.6 No 90 2 TX 6.1 No 100 4 TX 9.3 Yes 50 0 CA 4.8 No 100 4 TX 8.9 No 100 2 NY 6.5 No 50 2 MD 4.2 No 80 2 CA 6.2 No 75 3 WA 7.4 No 65 4 SD 6.0 No 90 3 ND 7.6 No 90 2 TX 6.1 No \u22ee \u22ee \u22ee \u22ee \u22ee 100 6 TX 9.3 Yes 50 3 CA 4.8 No 100 4 TX 8.9 Yes 100 2 NY 6.5 No 50 2 MD 4.2 No 80 2 CA 6.2 No 75 3 WA 7.4 No 65 4 SD 6.0 No 90 3 ND 7.6 No 90 2 TX 6.1 No 100 4 TX 9.3 Yes 50 3 CA 4.8 No 100 4 TX 8.9 Yes 40 6 NY 6.5 No 50 2 MD 4.2 No 80 2 CA 6.2 No 75 3 WA 7.4 Yes 65 4 SD 6.0 No 90 3 ND 7.6 Yes 90 2 TX 6.1 No 100 4 TX 9.3 Yes 50 3 CA 4.8 No 100 4 TX 8.9 Yes 100 2 NY 6.5 No 50 2 MD 4.2 No 80 2 CA 6.2 No 75 3 WA 7.4 Yes 65 4 SD 6.0 No 90 3 ND 7.6 Yes 90 2 TX 6.1 No","title":"Aim : Practical of Decision Tree"},{"location":"DSP7/","text":"Aim :Practical of Hypothesis testing One Sample Test Back-story Let x represent a sample collected from a normal population with unkown mean and standard deviation. We want to test if the population mean is equal to 9 at significance level 5%. The Hypothesis are: 1. H0(Null Hypothesis):Mean is equal to 9 2. H1(Alternate Hypothesis):Mean is not equal to 9 Code 1 2 3 X = c ( 6.2 , 6.6 , 7.1 , 7.4 , 7.6 , 7.9 , 8 , 8.3 , 8.4 , 8.5 , 8.6 , 8.8 , 8.8 , 9.1 , 9.2 , 9.4 , 9.4 , 9.7 , 9.9 , 10.2 , 10.4 , 10.8 , 11.3 , 11.9 ) 1 t.test ( X -9 , alternative = \"two.sided\" , conf.level = 0.95 ) Output 1 2 3 4 5 6 7 8 9 One Sample t-test data: X - 9 t = -0.35687, df = 23, p-value = 0.7244 alternative hypothesis: true mean is not equal to 0 95 percent confidence interval: -0.7079827 0.4996494 sample estimates: mean of x -0.1041667 Interpretation of above result P-value is 0.7244 is greater than 0.05(5%) significance level(alpha), Hence Null Hypothesis is true: Mean is plausibly equal to 9. Two Sample Hypothesis Test Back-story If we are interested in finding the confidence interval for the difference of two population means, the R command \"t.test\" is also to be used. we are interested in testing observations middle range and higher viscosity are from populations with different means at significance level 5%. The hypothesis are : 1. H0(Null Hypothesis): difference in means is 0 2. H1(Alternative Hypothesis): difference in means is not 0 Code 1 2 x = c ( 418 , 421 , 421 , 422 , 425 , 427 , 431 , 434 , 437 , 439 , 446 , 447 , 448 , 453 , 454 , 463 , 465 ) 1 y = c ( 429 , 430 , 430 , 431 , 436 , 437 , 440 , 441 , 445 , 446 , 447 ) 1 2 3 4 5 6 t.test ( x , y , alternative = \"two.sided\" , mu = 0 , var.equal = F , conf.level = 0.95 ) Output 1 2 3 4 5 6 7 8 9 Welch Two Sample t-test data: x and y t = 0.19937, df = 23.869, p-value = 0.8437 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: -7.854361 9.533506 sample estimates: mean of x mean of y 438.2941 437.4545 Interpretation of above result As P-value is 0.8437 which is greater than 5% level of significance(alpha), Hence, Null Hypothesis is True :Means are plausibly equal.","title":"Practical 7"},{"location":"DSP7/#aim-practical-of-hypothesis-testing","text":"","title":"Aim :Practical of Hypothesis testing"},{"location":"DSP7/#one-sample-test","text":"Back-story Let x represent a sample collected from a normal population with unkown mean and standard deviation. We want to test if the population mean is equal to 9 at significance level 5%. The Hypothesis are: 1. H0(Null Hypothesis):Mean is equal to 9 2. H1(Alternate Hypothesis):Mean is not equal to 9 Code 1 2 3 X = c ( 6.2 , 6.6 , 7.1 , 7.4 , 7.6 , 7.9 , 8 , 8.3 , 8.4 , 8.5 , 8.6 , 8.8 , 8.8 , 9.1 , 9.2 , 9.4 , 9.4 , 9.7 , 9.9 , 10.2 , 10.4 , 10.8 , 11.3 , 11.9 ) 1 t.test ( X -9 , alternative = \"two.sided\" , conf.level = 0.95 ) Output 1 2 3 4 5 6 7 8 9 One Sample t-test data: X - 9 t = -0.35687, df = 23, p-value = 0.7244 alternative hypothesis: true mean is not equal to 0 95 percent confidence interval: -0.7079827 0.4996494 sample estimates: mean of x -0.1041667 Interpretation of above result P-value is 0.7244 is greater than 0.05(5%) significance level(alpha), Hence Null Hypothesis is true: Mean is plausibly equal to 9.","title":"One Sample Test"},{"location":"DSP7/#two-sample-hypothesis-test","text":"Back-story If we are interested in finding the confidence interval for the difference of two population means, the R command \"t.test\" is also to be used. we are interested in testing observations middle range and higher viscosity are from populations with different means at significance level 5%. The hypothesis are : 1. H0(Null Hypothesis): difference in means is 0 2. H1(Alternative Hypothesis): difference in means is not 0 Code 1 2 x = c ( 418 , 421 , 421 , 422 , 425 , 427 , 431 , 434 , 437 , 439 , 446 , 447 , 448 , 453 , 454 , 463 , 465 ) 1 y = c ( 429 , 430 , 430 , 431 , 436 , 437 , 440 , 441 , 445 , 446 , 447 ) 1 2 3 4 5 6 t.test ( x , y , alternative = \"two.sided\" , mu = 0 , var.equal = F , conf.level = 0.95 ) Output 1 2 3 4 5 6 7 8 9 Welch Two Sample t-test data: x and y t = 0.19937, df = 23.869, p-value = 0.8437 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: -7.854361 9.533506 sample estimates: mean of x mean of y 438.2941 437.4545 Interpretation of above result As P-value is 0.8437 which is greater than 5% level of significance(alpha), Hence, Null Hypothesis is True :Means are plausibly equal.","title":"Two Sample Hypothesis Test"},{"location":"DSP8/","text":"Aim :Practical of Analysis of Variance Data-set Data Set used in Ftest : View ftest.csv Download ftest.csv Data Set used in 1-WAY ANOVA : View 1anova.csv Download 1anova.csv Data Set used in 2-WAY ANOVA : View 2anova.csv Download 2anova.csv 1 ft = read.csv ( \"ftest.csv\" , header = T ) 1 var.test ( ft $ time_g1 , ft $ time_g2 , alternative = \"two.sided\" ) Output 1 2 3 4 5 6 7 8 9 F test to compare two variances data: ft$time_g1 and ft$time_g2 F = 1.5434, num df = 11, denom df = 13, p-value = 0.4524 alternative hypothesis: true ratio of variances is not equal to 1 95 percent confidence interval: 0.4826988 5.2348866 sample estimates: ratio of variances 1.543428 1 data1 <- read.csv ( \"1anova.csv\" , header = T ) 1 names ( data1 ) Output 'satindex' 'dept' 1 summary ( data1 ) Output 1 2 3 4 5 6 7 satindex dept Min. :51.00 CS :13 1st Qu.:59.00 FINANCE :12 Median :66.00 MARKETING:12 Mean :65.59 3rd Qu.:71.00 Max. :77.00 1 head ( data1 ) Output A data.frame: 6 \u00d7 2 satindex dept <int> <fct> 1 75 FINANCE 2 56 FINANCE 3 72 FINANCE 4 59 FINANCE 5 62 FINANCE 6 66 FINANCE 1 anv <- aov ( formula = satindex ~ dept , data = data1 ) 1 summary ( anv ) Output 1 2 3 Df Sum Sq Mean Sq F value Pr(>F) dept 2 220.1 110.03 2.308 0.115 Residuals 34 1620.9 47.67 1 data2 <- read.csv ( \"2anova.csv\" , header = T ) 1 names ( data2 ) Output 'satindex' 'dept' 'exp' 1 summary ( data2 ) Output 1 2 3 4 5 6 7 satindex dept exp Min. :51.00 CS :12 gt5:18 1st Qu.:59.00 FINANCE :12 lt5:18 Median :66.00 MARKETING:12 Mean :65.31 3rd Qu.:71.00 Max. :77.00 1 anv1 <- aov ( formula = satindex ~ dept + exp + dept * exp , data = data2 ) 1 summary ( anv1 ) Output 1 2 3 4 5 Df Sum Sq Mean Sq F value Pr(>F) dept 2 164.2 82.11 1.679 0.204 exp 1 78.0 78.03 1.595 0.216 dept:exp 2 20.2 10.11 0.207 0.814 Residuals 30 1467.2 48.91","title":"Practical 8"},{"location":"DSP8/#aim-practical-of-analysis-of-variance","text":"Data-set Data Set used in Ftest : View ftest.csv Download ftest.csv Data Set used in 1-WAY ANOVA : View 1anova.csv Download 1anova.csv Data Set used in 2-WAY ANOVA : View 2anova.csv Download 2anova.csv 1 ft = read.csv ( \"ftest.csv\" , header = T ) 1 var.test ( ft $ time_g1 , ft $ time_g2 , alternative = \"two.sided\" ) Output 1 2 3 4 5 6 7 8 9 F test to compare two variances data: ft$time_g1 and ft$time_g2 F = 1.5434, num df = 11, denom df = 13, p-value = 0.4524 alternative hypothesis: true ratio of variances is not equal to 1 95 percent confidence interval: 0.4826988 5.2348866 sample estimates: ratio of variances 1.543428 1 data1 <- read.csv ( \"1anova.csv\" , header = T ) 1 names ( data1 ) Output 'satindex' 'dept' 1 summary ( data1 ) Output 1 2 3 4 5 6 7 satindex dept Min. :51.00 CS :13 1st Qu.:59.00 FINANCE :12 Median :66.00 MARKETING:12 Mean :65.59 3rd Qu.:71.00 Max. :77.00 1 head ( data1 ) Output A data.frame: 6 \u00d7 2 satindex dept <int> <fct> 1 75 FINANCE 2 56 FINANCE 3 72 FINANCE 4 59 FINANCE 5 62 FINANCE 6 66 FINANCE 1 anv <- aov ( formula = satindex ~ dept , data = data1 ) 1 summary ( anv ) Output 1 2 3 Df Sum Sq Mean Sq F value Pr(>F) dept 2 220.1 110.03 2.308 0.115 Residuals 34 1620.9 47.67 1 data2 <- read.csv ( \"2anova.csv\" , header = T ) 1 names ( data2 ) Output 'satindex' 'dept' 'exp' 1 summary ( data2 ) Output 1 2 3 4 5 6 7 satindex dept exp Min. :51.00 CS :12 gt5:18 1st Qu.:59.00 FINANCE :12 lt5:18 Median :66.00 MARKETING:12 Mean :65.31 3rd Qu.:71.00 Max. :77.00 1 anv1 <- aov ( formula = satindex ~ dept + exp + dept * exp , data = data2 ) 1 summary ( anv1 ) Output 1 2 3 4 5 Df Sum Sq Mean Sq F value Pr(>F) dept 2 164.2 82.11 1.679 0.204 exp 1 78.0 78.03 1.595 0.216 dept:exp 2 20.2 10.11 0.207 0.814 Residuals 30 1467.2 48.91","title":"Aim :Practical of Analysis of Variance"},{"location":"data/","text":"What is data ? Data are a set of values of qualitative or quantitative variables about one or more persons or objects, while a datum (singular of data) is a single value of a single variable.","title":"Data"},{"location":"data/#what-is-data","text":"Data are a set of values of qualitative or quantitative variables about one or more persons or objects, while a datum (singular of data) is a single value of a single variable.","title":"What is data ?"},{"location":"genviva/","text":"","title":"General Viva"},{"location":"languages/","text":"Best Programming Languages for Data Science 1. Python 2. R 3. Julia 4. Matlab/Octave 5. Java 6. Scala 7. JavaScript","title":"Languages"},{"location":"languages/#best-programming-languages-for-data-science","text":"","title":"Best Programming Languages for Data Science"},{"location":"languages/#1-python","text":"","title":"1. Python"},{"location":"languages/#2-r","text":"","title":"2. R"},{"location":"languages/#3-julia","text":"","title":"3. Julia"},{"location":"languages/#4-matlaboctave","text":"","title":"4. Matlab/Octave"},{"location":"languages/#5-java","text":"","title":"5. Java"},{"location":"languages/#6-scala","text":"","title":"6. Scala"},{"location":"languages/#7-javascript","text":"","title":"7. JavaScript"}]}